(in-package :raytracer)

(defun view-transform (from to up)
  (let* ((forward (normalize (tsub to from)))
         (upn (normalize up))
         (left (cross forward upn))
         (true-up (cross left forward))
         (nforward (mults forward -1))
         (nfrom (mults from -1))
         (orientation (make-array '(4 4)
            :initial-contents
            (list
             (list (aref left 0)
                   (aref left 1)
                   (aref left 2) 0)
             (list (aref true-up 0)
                   (aref true-up 1)
                   (aref true-up 2) 0)
             (list (aref nforward 0)
                   (aref nforward 1)
                   (aref nforward 2) 0)
              (list 0 0 0 1)))))
    (mm orientation (translation (aref nfrom 0)
                                 (aref nfrom 1)
                                 (aref nfrom 2)))))



(defun ray-for-pixel (camera px py)
  (let* ((xoffset (* (camera-pixel-size camera) (+ px 0.5)))
         (yoffset (* (camera-pixel-size camera) (+ py 0.5)))
         (world-x (- (camera-half-width camera) xoffset))
         (world-y (- (camera-half-height camera) yoffset))
         (pixel (mm (inverse (camera-transform camera))
                    (point world-x world-y -1)))
         (origin (mm (inverse (camera-transform camera))
                     (point 0 0 0)))
         (direction (normalize (tsub pixel origin))))
    (make-ray :origin origin :direction direction)))

(defun render (camera world)
  (let ((image (canvas (camera-hsize camera) (camera-vsize camera))))
    (dotimes (y (camera-vsize camera))
      (dotimes (x (camera-hsize camera))
        (let*  ((ray (ray-for-pixel camera x y))
                (color (color-at world ray)))
          (write-pixel image x y color))))
    image))

