(in-package :raytracer)

(defun mm (a b)
  (let* ((dim-a (array-dimensions a))
         (dim-b (array-dimensions b))
         (a1 (first dim-a))
         (a2 (second dim-a))
         (b1 (first dim-b))
         (b2 (second dim-b))
         )
    (when (/= a2 b1)
      (error "dimensions not compatible for multiplication"))
    (let ((result (make-array (list a1 b2))))
      (dotimes (i a1)
        (dotimes (j b2)
          (let ((s 0))
                  (dotimes (k a2)
                    (incf s (* (aref a i k) (aref b k j))))
            (setf (aref result i j) s))))
      result)))

(defconstant +identity-matrix+
  (make-array '(4 4)
              :initial-contents
              '((1 0 0 0)
                (0 1 0 0)
                (0 0 1 0)
                (0 0 0 1))))

(defun transpose (m)
  (let* ((dim (array-dimensions m))
         (d1 (first dim))
         (d2 (second dim)))
    (when (/= 2 (length dim))
      (error "transpose only for 2-dimensional matrices"))
    (let ((result (make-array (list d2 d1))))
      (dotimes (i d1)
        (dotimes (j d2)
          (setf (aref result j i) (aref m i j))))
      result)))
