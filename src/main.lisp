(in-package :raytracer)

(defun draw ()
  (let* ((ray-origin (point 0 0 -5))
         (wall-z 10)
         (wall-size 7)
         (canvas-pixel 200)
         (pixel-size (/ wall-size canvas-pixel))
         (half (/ wall-size 2))
         (canvas (canvas canvas-pixel canvas-pixel))
         (color (color 1 0 0))
         (shape (make-sphere)))
    (dotimes (y canvas-pixel)
      (let ((world-y (- half (* pixel-size y))))
        (dotimes (x canvas-pixel)
          (let* ((world-x (+ (- half) (* pixel-size x)))
                 (position (point world-x world-y wall-z))
                 (r (make-ray
                     :origin ray-origin
                     :direction (normalize (tsub position ray-origin))))
                 (xs (intersect shape r)))
            (when (hit xs)
              (write-pixel canvas x y color))))))
    (save-canvas canvas "sphere1.ppm")))

